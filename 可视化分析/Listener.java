package com.fr.form.dashuju;import com.fr.general.ComparatorUtils;import com.fr.general.xml.GeneralXMLTools;import com.fr.js.JavaScript;import com.fr.js.JavaScriptImpl;import com.fr.js.JavaScriptXMLUtils;import com.fr.json.JSONException;import com.fr.json.JSONFunction;import com.fr.json.JSONObject;import com.fr.json.JSONVariable;import com.fr.stable.FCloneable;import com.fr.stable.StringUtils;import com.fr.stable.web.Repository;import com.fr.stable.xml.XMLPrintWriter;import com.fr.stable.xml.XMLReadable;import com.fr.stable.xml.XMLableReader;import java.io.Serializable;public class Listener  implements XMLReadable, Serializable, Cloneable{  public static final String XML_TAG = "Listener";  private String targetWidget;  private String eventName;  private boolean invokeOnce = false;  private JavaScript action;  public Listener()  {  }  public boolean isDefault()  {    return false;  }  public Listener(String paramString)  {    this(paramString, null);  }  public Listener(String paramString, JavaScript paramJavaScript)  {    this(paramString, paramJavaScript, false);  }  public Listener(String paramString, JavaScript paramJavaScript, boolean paramBoolean)  {    this(null, paramString, paramJavaScript, paramBoolean);  }  public Listener(String paramString1, String paramString2, JavaScript paramJavaScript)  {    this(paramString1, paramString2, paramJavaScript, false);  }  public Listener(String paramString1, String paramString2, JavaScript paramJavaScript, boolean paramBoolean)  {    setTargetWidget(paramString1);    setEventName(paramString2);    setAction(paramJavaScript);    setInvokeOnce(paramBoolean);  }  public String getTargetWidget()  {    return this.targetWidget;  }  public void setTargetWidget(String paramString)  {    this.targetWidget = paramString;  }  public String getEventName()  {    return this.eventName;  }  public void setEventName(String paramString)  {    this.eventName = paramString;  }  public boolean isInvokeOnce()  {    return this.invokeOnce;  }  public void setInvokeOnce(boolean paramBoolean)  {    this.invokeOnce = paramBoolean;  }  public JavaScript getAction()  {    return this.action;  }  public void setAction(JavaScript paramJavaScript)  {    this.action = paramJavaScript;  }  public JSONObject createJSONConfig(Repository paramRepository)    throws JSONException  {    JSONObject localJSONObject = new JSONObject();    String str = getTargetWidget();    if (StringUtils.isNotBlank(str))      localJSONObject.put("target", new JSONVariable(str));    localJSONObject.put("eventName", getEventName());    localJSONObject.put("once", isInvokeOnce());    JavaScript localJavaScript = getAction() == null ? new JavaScriptImpl() : getAction();    localJSONObject.put("action", new JSONFunction(new String[] { "e" }, localJavaScript.createJS(paramRepository)));    return localJSONObject;  }  public void readXML(XMLableReader paramXMLableReader)  {    if (paramXMLableReader.isAttr())    {      String str;      if ((str = paramXMLableReader.getAttrAsString("target", null)) != null)        setTargetWidget(str);      if ((str = paramXMLableReader.getAttrAsString("event", null)) != null)        setEventName(str);      setInvokeOnce(paramXMLableReader.getAttrAsBoolean("once", false));    }    if ((paramXMLableReader.isChildNode()) && (paramXMLableReader.getTagName().equals("JavaScript")))      setAction(JavaScriptXMLUtils.readJavaScript(paramXMLableReader));  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    paramXMLPrintWriter.startTAG("Listener");    if (StringUtils.isNotBlank(getTargetWidget()))      paramXMLPrintWriter.attr("target", getTargetWidget());    if (StringUtils.isNotBlank(getEventName()))      paramXMLPrintWriter.attr("event", getEventName());    if (isInvokeOnce())      paramXMLPrintWriter.attr("once", isInvokeOnce());    if (getAction() != null)      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, getAction(), "JavaScript");    paramXMLPrintWriter.end();  }  public String toString()  {    return this.eventName + ":" + this.action.getClass().getName();  }  public boolean equals(Object paramObject)  {    if (paramObject == this)      return true;    if (!(paramObject instanceof Listener))      return false;    return (ComparatorUtils.equals(getTargetWidget(), ((Listener)paramObject).getTargetWidget())) && (ComparatorUtils.equals(getEventName(), ((Listener)paramObject).getEventName())) && (ComparatorUtils.equals(getAction(), ((Listener)paramObject).getAction())) && (isInvokeOnce() == ((Listener)paramObject).isInvokeOnce());  }  public Object clone()    throws CloneNotSupportedException  {    Listener localListener = (Listener)super.clone();    if (this.action != null)      localListener.action = ((JavaScript)this.action.clone());    return localListener;  }}