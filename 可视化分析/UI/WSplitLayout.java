package com.fr.form.ui.container;import com.fr.form.ui.Connector;import com.fr.form.ui.EdashujuXMLUtils;import com.fr.form.ui.Widget;import com.fr.general.ComparatorUtils;import com.fr.general.Inter;import com.fr.general.xml.GeneralXMLTools;import com.fr.json.JSONArray;import com.fr.json.JSONException;import com.fr.json.JSONObject;import com.fr.script.Calculator;import com.fr.stable.StringUtils;import com.fr.stable.web.Repository;import com.fr.stable.xml.XMLPrintWriter;import com.fr.stable.xml.XMLableReader;import java.awt.Dimension;import java.awt.Rectangle;import java.util.ArrayList;import java.util.Collections;public class WAbsoluteLayout extends WLayout{  private ArrayList connectorList = new ArrayList();  public WAbsoluteLayout()  {  }  public WAbsoluteLayout(String paramString)  {    if (StringUtils.isNotEmpty(paramString))      setWidgetName(paramString);  }  public void setBounds(Widget paramWidget, Rectangle paramRectangle)  {    BoundsWidget localBoundsWidget = getBoundsWidget(paramWidget);    if (localBoundsWidget != null)      localBoundsWidget.setBounds(paramRectangle);  }  public String getXType()  {    return "absolute";  }  public void addConnector(Connector paramConnector)  {    this.connectorList.add(paramConnector);  }  public int connectorCount()  {    return this.connectorList.size();  }  public void removeConnector(Connector paramConnector)  {    this.connectorList.remove(paramConnector);  }  public void clearLinkLine()  {    this.connectorList.clear();  }  public Connector getConnectorIndex(int paramInt)  {    return (Connector)this.connectorList.get(paramInt);  }  public Connector[] getConnector()  {    return (Connector[])this.connectorList.toArray(new Connector[0]);  }  public Connector[] getCoveredConnectors(Rectangle paramRectangle)  {    ArrayList localArrayList = new ArrayList();    for (int i = 0; i < this.connectorList.size(); i++)    {      Connector localConnector = (Connector)this.connectorList.get(i);      if (localConnector.coveredByRectangle(paramRectangle))        localArrayList.add(localConnector);    }    return (Connector[])localArrayList.toArray(new Connector[localArrayList.size()]);  }  public String getLayoutToolTip()  {    return Inter.getLocText("WLayout-Absolute-ToolTips");  }  public BoundsWidget getBoundsWidget(Widget paramWidget)  {    int i = 0;    int j = getWidgetCount();    while (i < j)    {      BoundsWidget localBoundsWidget = (BoundsWidget)getWidget(i);      if (ComparatorUtils.equals(localBoundsWidget.getWidget(), paramWidget))        return localBoundsWidget;      i++;    }    return null;  }  protected JSONArray createJSONItems(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    Collections.sort(this.widgetList);    return super.createJSONItems(paramRepository, paramCalculator);  }  public Dimension getMinDesignSize()  {    int i = 0;    int j = 0;    int k = 0;    int m = getWidgetCount();    while (k < m)    {        Rectangle localRectangle = localBoundsWidget.getBounds();        i = localRectangle.x + localRectangle.width > i ? localRectangle.x + localRectangle.width : i;        j = localRectangle.y + localRectangle.height > j ? localRectangle.y + localRectangle.height : j;      }      k++;    }    return new Dimension(i, j);  }  public void readXML(XMLableReader paramXMLableReader)  {    super.readXML(paramXMLableReader);    if ((paramXMLableReader.isChildNode()) && (paramXMLableReader.getTagName().equals("connector")))    {      Connector localConnector = new Connector();      paramXMLableReader.readXMLObject(localConnector);   addConnector(localConnector);  }} public String getText()  {    return this.text;  }  public String getIconName()  {    return this.iconName;  }paramCalculator)    throws JSONException  {    JSONObject localJSONObject = super.createJSONConfig(paramRepository, paramCalculator);    localJSONObject.put("render", true);    if ((this.text != null) && (isShowText()))      localJSONObject.put("text", WidgetValue.text2Config(paramRepository.i18n(this.text), paramRepository.getCalculator()));    if (StringUtils.isNotEmpty(this.hotkeys))      localJSONObject.put("hotkeys", this.hotkeys);    if ((this.iconName != null) && (isShowIcon()))      localJSONObject.put("icon", WidgetManager.getInstance().getIconManager().getCssInfo(this.iconName, paramRepository.getServletURL()));    return localJSONObject;  }  public Object value2Config(Object paramObject, CalculatorProvider paramCalculatorProvider)  {    return (isShowText()) && (paramObject != null) ? WidgetValue.text2Config(Utils.objectToString(paramObject), paramCalculatorProvider) : null;  }  public void readXML(XMLableReader paramXMLableReader)  {    super.readXML(paramXMLableReader);    if (paramXMLableReader.isChildNode())    {      String str1 = paramXMLableReader.getTagName();      String str2;      if (str1.equals("Text"))      {        if ((str2 = paramXMLableReader.getElementValue()) != null)          setText(str2);      }      else if (str1.equals("Hotkeys"))      {        if ((str2 = paramXMLableReader.getElementValue()) != null)          setHotkeys(str2);      }      else if (str1.equals("ShowIcon"))      {        if ((str2 = paramXMLableReader.getElementValue()) != null)          setShowIcon(new Boolean(str2).booleanValue());      }      else if (str1.equals("ShowText"))      {        if ((str2 = paramXMLableReader.getElementValue()) != null)          setShowText(new Boolean(str2).booleanValue());      }      else if (str1.equals("IconName"))      {        if ((str2 = paramXMLableReader.getElementValue()) != null)          setIconName(str2);      }      else if ((Icon.XML_TAG.equals(str1)) && ((str2 = paramXMLableReader.getAttrAsString("name", null)) != null))        setIconName(str2);    }  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    super.writeXML(paramXMLPrintWriter);    if (StringUtils.isNotBlank(this.text))      paramXMLPrintWriter.startTAG("Text").textNode(this.text).end();    if (StringUtils.isNotBlank(this.hotkeys))      paramXMLPrintWriter.startTAG("Hotkeys").textNode(this.hotkeys).end();    if (!this.showIcon)      paramXMLPrintWriter.startTAG("ShowIcon").textNode(String.valueOf(this.showIcon)).end();    if (!this.showText)      paramXMLPrintWriter.startTAG("ShowText").textNode(String.valueOf(this.showText)).end();    if (this.iconName != null)      paramXMLPrintWriter.startTAG("IconName").textNode(String.valueOf(this.iconName)).end();  }  public boolean equals(Object paramObject)  {    if ((paramObject == null) || (!(paramObject instanceof Button)))      return false;    Button localButton = (Button)paramObject;    return (super.equals(paramObject)) && (ComparatorUtils.equals(getText(), localButton.getText())) && (ComparatorUtils.equals(getIconName(), localButton.getIconName())) && (isShowIcon() == localButton.isShowIcon()) && (isShowText() == localButton.isShowText()) && (ComparatorUtils.equals(this.hotkeys, localButton.getHotkeys()));  }  public Object clone()    throws CloneNotSupportedException  {    Button localButton = (Button)super.clone();    return localButton;  }}  public void addNorth(Widget paramWidget)  {    this.north = paramWidget;  }  public void addSouth(Widget paramWidget)  {    this.south = paramWidget;  }  public void addWest(Widget paramWidget)  {    this.west = paramWidget;  }  public void addEast(Widget paramWidget)  {    this.east = paramWidget;  }public String getLayoutToolTip()  {return Inter.getLocText("WLayout-Horizontail-ToolTips"); }public class WCardLayout extends WLayout{  private int showIndex = 0;  public WCardLayout()  {    this(0, 0);  }  public WCardLayout(int paramInt1, int paramInt2)  {    setHgap(paramInt1);    setVgap(paramInt2);  }  public int getShowIndex()  {    return this.showIndex;  }  public void setShowIndex(int paramInt)  {    this.showIndex = paramInt;  }  public String getShowIndex2Name()  {    return getWidget(this.showIndex).getWidgetName();  }  public void setShowIndexByName(String paramString)  {    this.showIndex = getWidgetIndex(getWidget(paramString));  }  public String getXType()  {    return "card";  }  public String getLayoutToolTip()  {    return Inter.getLocText("WLayout-Card-ToolTips");  }  public Dimension getMinDesignSize()  {    if (getWidgetCount() > this.showIndex)    {      Widget localWidget = getWidget(this.showIndex);      if (((localWidget instanceof WLayout)) && (localWidget.isVisible()))        return ((WLayout)localWidget).getMinDesignSize();    }    return new Dimension();  }  public void setRatio(double paramDouble)  {    this.ratio = paramDouble;  }  public void addWidget(Widget paramWidget, Object paramObject)  {    if ("aside".equals(paramObject))      addAside(paramWidget);    else      addCenter(paramWidget);  }  public void addCenter(Widget paramWidget)  {    super.addWidget(paramWidget);    this.center = paramWidget;  }  public void addAside(Widget paramWidget)  {    super.addWidget(paramWidget);    this.aside = paramWidget;  }  public Widget getLayoutWidget(Object paramObject)  {    if ("aside".equals(paramObject))      return this.aside;    return this.center;  }  public void removeWidget(Widget paramWidget)  {    super.removeWidget(paramWidget);    if (ComparatorUtils.equals(paramWidget, this.center))      this.center = null;    else if (ComparatorUtils.equals(paramWidget, this.aside))      this.aside = null;  }  public String getLayoutToolTip()  {    return Inter.getLocText("WLayout-Split-ToolTips");  }  public Dimension getMinDesignSize()  {    return new Dimension();  }  public void removeAll()  {    super.removeAll();    this.center = null;    this.aside = null;  }  public JSONObject createJSONConfig(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONObject localJSONObject = super.createJSONConfig(paramRepository, paramCalculator);    localJSONObject.put("ratio", this.ratio);    return localJSONObject;  }  protected JSONArray createJSONItems(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONArray localJSONArray = new JSONArray();    JSONObject localJSONObject;    if (this.aside != null)    {      localJSONObject = new JSONObject();      localJSONObject.put("region", "aside");      localJSONObject.put("el", this.aside.createJSONConfig(paramRepository, paramCalculator));      localJSONArray.put(localJSONObject);    }    if (this.center != null)    {      localJSONObject = new JSONObject();      localJSONObject.put("region", "center");      localJSONObject.put("el", this.center.createJSONConfig(paramRepository, paramCalculator));      localJSONArray.put(localJSONObject);    }    return localJSONArray;  }  public void readXML(XMLableReader paramXMLableReader)  {    super.readXML(paramXMLableReader);    if (paramXMLableReader.isChildNode())    {      String str = paramXMLableReader.getTagName();      if (str.equals("Center"))        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)          }{  WSplitLayout.this.addCenter((Widget)GeneralXMLTools.readXMLable(paramAnonymousXMLableReader));          }        });      else if (str.equals("Aside"))        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)          {            }WSplitLayout.this.addAside((Widget)GeneralXMLTools.readXMLable(paramAnonymousXMLableReader));          }        });      else if (str.equals("SplitAttr"))    setRatio(paramXMLableReader.getAttrAsDouble("ratio", 0.5D));  }}public abstract class WSplitLayout extends WLayout{  public static final String CENTER = "center";  public static final String ASIDE = "aside";  private double ratio = 0.5D;  private Widget center;  private Widget aside;  public double getRatio()  {    return this.ratio;  } public String getLayoutToolTip()  {    return Inter.getLocText("WLayout-Vertical-ToolTips");  }  public Button(String paramString1, String paramString2)  {     JSONObject localJSONObject = new JSONObject();    localJSONObject.put("src", paramRepository.i18n(this.text));    localJSONObject.put("iconSrc", WidgetManager.getInstance().getIconManager().getCssInfo(getIconName(), paramRepository.getServletURL()));    localJSONObject.put("showIconSrc", isShowIcon());    localJSONObject.put("showTextSrc", isShowText());    return localJSONObject;  }  public JSONObject createJSONConfig(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONObject localJSONObject = super.createJSONConfig(paramRepository, paramCalculator);    localJSONObject.put("render", true);    if ((this.text != null) && (isShowText()))      localJSONObject.put("text", WidgetValue.text2Config(paramRepository.i18n(this.text), paramRepository.getCalculator()));    if (StringUtils.isNotEmpty(this.hotkeys))      localJSONObject.put("hotkeys", this.hotkeys);    if ((this.iconName != null) && (isShowIcon()))      localJSONObject.put("icon", WidgetManager.getInstance().getIconManager().getCssInfo(this.iconName, paramRepository.getServletURL()));    return localJSONObject;   this.text = paramString1;    this.iconName = paramString2;  }  public boolean isShowIcon()  {    return this.showIcon;  }  public void setShowIcon(boolean paramBoolean)  {    this.showIcon = paramBoolean;  }  public boolean isShowText()  {    return this.showText;  }  public void setShowText(boolean paramBoolean)  {    this.showText = paramBoolean;  }  public String getHotkeys()  {    return this.hotkeys;  }  public void setHotkeys(String paramString)  {    this.hotkeys = paramString;  }  public String getXType()  {    return "button";  }  public boolean isEditor()  {    return false;  }  public String[] supportedEvents()  {    return new String[] { "afterinit", "click" };  }  public String resolveText(Repository paramRepository)  {    if (StringUtils.isNotBlank(this.text))    {      if (StringUtils.trim(this.text).charAt(0) == '=')        return paramRepository.i18n(this.text);      return getText();    }    return "";  } public void setMargin(PaddingMargin paramPaddingMargin)  {   this.margin = paramPaddingMargin; }  private static boolean validDataBinding(DataBinding paramDataBinding)  {    return (StringUtils.isNotEmpty(paramDataBinding.dataBindingKey)) && (paramDataBinding.dataBindingKey.split("\\.").length > 1) && (ComparatorUtils.equals(paramDataBinding.dataBindingKey.split("\\.")[0], paramDataBinding.dataSourceName));  }  public boolean validate()  {    return (StringUtils.isNotEmpty(this.dataSourceName)) && (StringUtils.isNotEmpty(this.dataBindingKey));  }  public void setDataSourceName(String paramString)  {    this.dataSourceName = paramString;  }  public String getDataSourceName()  {    return this.dataSourceName;  }  public void setDataBindingKey(String paramString)  {    this.dataBindingKey = paramString;  }  public String getDataBindingKey()  {    return this.dataBindingKey;  }  public boolean equals(Object paramObject)  {    return ((paramObject instanceof DataBinding)) && (ComparatorUtils.equals(((DataBinding)paramObject).dataSourceName, this.dataSourceName)) && (ComparatorUtils.equals(((DataBinding)paramObject).dataBindingKey, this.dataBindingKey));  }  public String toString()  {    return "{" + (StringUtils.isBlank(getDataSourceName()) ? "" : new StringBuffer().append(NAME).append(":").append(getDataSourceName()).toString()) + ((StringUtils.isBlank(getDataSourceName())) || (StringUtils.isBlank(getDataBindingKey())) ? "" : ",") + (StringUtils.isBlank(getDataBindingKey()) ? "" : new StringBuffer().append(KEY).append(":").append(getDataBindingKey()).toString()) + "}";  }}