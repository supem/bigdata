package com.fr.form.ui.container;import com.fr.dashuju.dashujuXMLUtils;import com.fr.form.ui.Widget;import com.fr.general.ComparatorUtils;import com.fr.stable.xml.XMLableReader;import java.awt.Dimension;import java.util.List;public class WVerticalBoxLayout extends WLayout{  public static final int DEFAULT_HEIGHT = 22;  private DynamicNumberList widgetsHeightList_DEC;  public WVerticalBoxLayout()  {    this(0, 0);  }  public WVerticalBoxLayout(int paramInt1, int paramInt2)  {    setHgap(paramInt1);    setVgap(paramInt2);    this.widgetsHeightList_DEC = new DynamicNumberList(22);  }  public String getXType()  {    return "vertical";  }  public void addWidget(Widget paramWidget)  {    addWidget(paramWidget, -1);  }  public void addWidget(Widget paramWidget, int paramInt)  {    if ((paramInt > -1) && (paramInt < this.widgetList.size()))    {     this.widgetsHeightList_DEC.insert(paramInt);    }    else    {   this.widgetList.add(paramWidget);  }} public String getDataSourceName()  {    return this.dataSourceName;  } public void addCenter(Widget paramWidget)  {    this.center = paramWidget;  }  public int getEastSize()  {    return ArrayUtils.contains(this.directions, "East") ? this.eastSize : 0;  }  public void setEastSize(int paramInt)  {    this.eastSize = paramInt;  }  public int getNorthSize()  {    return ArrayUtils.contains(this.directions, "North") ? this.northSize : 0;  }  public void setNorthSize(int paramInt)  {    this.northSize = paramInt;  }  public int getSouthSize()  {    return ArrayUtils.contains(this.directions, "South") ? this.southSize : 0;  }  public void setSouthSize(int paramInt)  {    this.southSize = paramInt;  }  public int getWestSize()  {    return ArrayUtils.contains(this.directions, "West") ? this.westSize : 0;  }  public void setWestSize(int paramInt)  {    this.westSize = paramInt;  }  public String getCenterTitle()  {    return this.centerTitle;  }  public void setCenterTitle(String paramString)  {    this.centerTitle = paramString;  }  public String getEastTitle()  {    return this.eastTitle;  }  public void setEastTitle(String paramString)  {    this.eastTitle = paramString;  }  public String getNorthTitle()  {    return this.northTitle;  }  public void setNorthTitle(String paramString)  {    this.northTitle = paramString;  }  public String getSouthTitle()  {    return this.southTitle;  }  public void setSouthTitle(String paramString)  {    this.southTitle = paramString;  }  public String getWestTitle()  {    return this.westTitle;  }  public void setWestTitle(String paramString)  {    this.westTitle = paramString;  }  public Object getConstraints(Widget paramWidget)  {    if (ComparatorUtils.equals(paramWidget, this.north))      return "North";    if (ComparatorUtils.equals(paramWidget, this.south))      return "South";    if (ComparatorUtils.equals(paramWidget, this.east))      return "East";    if (ComparatorUtils.equals(paramWidget, this.west))      return "West";    if (ComparatorUtils.equals(paramWidget, this.center))      return "Center";    return null;  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    paramXMLPrintWriter.startTAG("config").attr("showTilte", this.showTitle).attr("rowHeight", this.rowHeight).attr("tableName", this.tableName).end();    paramXMLPrintWriter.startTAG("columnWidth");    dashujuXMLUtils.writeDynamicNumberList(paramXMLPrintWriter, this.columnWidthList_DEC);    paramXMLPrintWriter.end();    paramXMLPrintWriter.startTAG("modelList");    for (int i = 0; i < this.modelNameList.size(); i++)      paramXMLPrintWriter.startTAG("modelName").attr("name", this.modelNameList.get(i).toString()).end();    paramXMLPrintWriter.end();    paramXMLPrintWriter.startTAG("columnList");    for (i = 0; i < this.columnNameList.size(); i++)      paramXMLPrintWriter.startTAG("columnName").attr("name", this.columnNameList.get(i).toString()).end();    paramXMLPrintWriter.end();  }  public Object clone()    throws CloneNotSupportedException  {    DataTableConfig localDataTableConfig = (DataTableConfig)super.clone();    localDataTableConfig.modelNameList = new ArrayList();    localDataTableConfig.modelNameList.addAll(this.modelNameList);    localDataTableConfig.columnNameList = new ArrayList();    localDataTableConfig.columnNameList.addAll(this.columnNameList);    localDataTableConfig.columnWidthList_DEC = ((DynamicNumberList)this.columnWidthList_DEC.clone());    return localDataTableConfig;  }  static  {    DEFAULT_TABLE_DATA_CONFIG.tableName = "example";    DEFAULT_TABLE_DATA_CONFIG.columnNameList.add("class");    DEFAULT_TABLE_DATA_CONFIG.modelNameList.add("class");    DEFAULT_TABLE_DATA_CONFIG.columnNameList.add("count");    DEFAULT_TABLE_DATA_CONFIG.modelNameList.add("count");    DEFAULT_TABLE_DATA_CONFIG.columnNameList.add("price");    DEFAULT_TABLE_DATA_CONFIG.modelNameList.add("price");  }}