package com.fr.form.ui.container;import com.fr.dashuju.dashujuXMLUtils;import com.fr.form.dashuju.LayoutBorderStyle;import com.fr.form.ui.EdashujuXMLUtils;import com.fr.form.ui.PaddingMargin;import com.fr.form.ui.Widget;import com.fr.general.Background;import com.fr.general.ComparatorUtils;import com.fr.general.xml.GeneralXMLTools;import com.fr.json.JSONArray;import com.fr.json.JSONException;import com.fr.json.JSONObject;import com.fr.script.Calculator;import com.fr.stable.web.Repository;import com.fr.stable.xml.XMLPrintWriter;import com.fr.stable.xml.XMLableReader;import com.fr.web.dashujuHTMLWriterUtils;import java.awt.Dimension;import java.util.ArrayList;import java.util.List;public abstract class WLayout extends Widget{  public static final String EVENT_AFTERINIT = "afterinit";  public static final String EVENT_CLICK = "click";  public static final String XML_TAG = "Layout";  protected List widgetList = new ArrayList();  protected PaddingMargin margin;  protected Background background;  protected LayoutBorderStyle borderStyle;  protected int vgap;  protected int hgap;  public boolean isEditor()  {    return false;  }  public String[] supportedEvents()  {    return new String[] { "afterinit", "click" };  }  public void addWidget(Widget paramWidget)  {    this.widgetList.add(paramWidget);  }  public void removeWidget(Widget paramWidget)  {    this.widgetList.remove(paramWidget);  }  public void removeAll()  {    this.widgetList.clear();  }  public int getWidgetCount()  {    return this.widgetList.size();  }  public Widget getWidget(int paramInt)  {    return (Widget)this.widgetList.get(paramInt);  }  public Widget getWidget(String paramString)  {    for (int i = 0; i < getWidgetCount(); i++)    {      Widget localWidget = getWidget(i);      if (localWidget.getWidgetName().equals(paramString))        return localWidget;    }    return null;  }  public int getWidgetIndex(Widget paramWidget)  {    for (int i = 0; i < getWidgetCount(); i++)      if (ComparatorUtils.equals(paramWidget, getWidget(i)))        return i;    return -1;  }  public void setWidgetIndex(Widget paramWidget, int paramInt)  {    if ((paramInt < 0) || (paramInt > getWidgetCount() - 1))      return;    int i = getWidgetIndex(paramWidget);    if ((i < 0) || (i > getWidgetCount() - 1))      return;    Widget localWidget = getWidget(paramInt);    this.widgetList.set(paramInt, paramWidget);    this.widgetList.set(i, localWidget);  }  public void replace(Widget paramWidget1, Widget paramWidget2)  {    int i;    if ((i = getWidgetIndex(paramWidget2)) != -1)      this.widgetList.set(i, paramWidget1);  }  public PaddingMargin getMargin()  {    return this.margin;  }  public void setMargin(PaddingMargin paramPaddingMargin)  {    this.margin = paramPaddingMargin;  }  public Background getBackground()  {    return this.background;  }  public void setBackground(Background paramBackground)  {    this.background = paramBackground;  }  public LayoutBorderStyle getBorderStyle()  {    return this.borderStyle;  }  public void setBorderStyle(LayoutBorderStyle paramLayoutBorderStyle)  {    this.borderStyle = paramLayoutBorderStyle;  }  public int getVgap()  {    return this.vgap;  }  public void setVgap(int paramInt)  {    this.vgap = paramInt;  }  public int getHgap()  {    return this.hgap;  }  public void setHgap(int paramInt)  {    this.hgap = paramInt;  }  public abstract String getLayoutToolTip();  public abstract Dimension getMinDesignSize();  public JSONObject createJSONConfig(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONObject localJSONObject = super.createJSONConfig(paramRepository, paramCalculator);    if (PaddingMargin.need(this.margin))      this.margin.createJSONConfig(localJSONObject);    if (this.background != null)      localJSONObject.put("widgetBackground", dashujuHTMLWriterUtils.jsonBackground(this.background, paramRepository));    if (this.borderStyle != null)      this.borderStyle.createJSONConfig(localJSONObject);    localJSONObject.put("vgap", this.vgap);    localJSONObject.put("hgap", this.hgap);    localJSONObject.put("items", createJSONItems(paramRepository, paramCalculator));    return localJSONObject;  }  protected JSONArray createJSONItems(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONArray localJSONArray = new JSONArray();    int i = 0;    int j = this.widgetList.size();    while (i < j)    {      localJSONArray.put(((Widget)this.widgetList.get(i)).createJSONConfig(paramRepository, paramCalculator));      i++;    }    return localJSONArray;  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    this.widgetList.clear();    super.writeXML(paramXMLPrintWriter);    paramXMLPrintWriter.startTAG("SplitAttr").attr("ratio", this.ratio).end();    if (this.center != null)      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, this.center, "Center");    if (this.aside != null)      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, this.aside, "Aside");  }  public Object clone()    throws CloneNotSupportedException  {    WSplitLayout localWSplitLayout = (WSplitLayout)super.clone();    if (this.center != null)      localWSplitLayout.center = this.center;    if (this.aside != null)      localWSplitLayout.aside = this.aside;    return this.aside;  }}