package com.fr.form.dashuju;import com.fr.dashuju.dashujuUtils;import com.fr.dashuju.GraphHelper;import com.fr.general.ComparatorUtils;import com.fr.json.JSONException;import com.fr.json.JSONObject;import com.fr.stable.StableUtils;import com.fr.stable.xml.XMLPrintWriter;import com.fr.stable.xml.XMLable;import com.fr.stable.xml.XMLableReader;import java.awt.Color;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Insets;import java.awt.Shape;import java.awt.geom.Rectangle2D.Double;import java.awt.geom.RoundRectangle2D.Double;import java.io.Serializable;public class LayoutBorderStyle  implements Cloneable, Serializable, XMLable{  private static final long serialVersionUID = 2677466857456162929L;  private Color color = Color.BLACK;  private int border = 0;  private boolean corner = true;  public LayoutBorderStyle()  {  }  public void reset()  {    setColor(Color.black);    setBorder(0);    setCorner(true);  }  public LayoutBorderStyle(int paramInt, Color paramColor, boolean paramBoolean)  {    setStyle(paramInt, paramColor, paramBoolean);  }  public void setStyle(int paramInt, Color paramColor, boolean paramBoolean)  {    setColor(paramColor);    setBorder(paramInt);    setCorner(paramBoolean);  }  public void setStyle(LayoutBorderStyle paramLayoutBorderStyle)  {    if (paramLayoutBorderStyle == null)    {      reset();    }    else    {      this.border = paramLayoutBorderStyle.border;      this.color = paramLayoutBorderStyle.color;      this.corner = paramLayoutBorderStyle.corner;    }  }  public Color getColor()  {    return this.color;  }  public void setColor(Color paramColor)  {    this.color = paramColor;  }  public boolean getCorner()  {    return this.corner;  }  public void setCorner(boolean paramBoolean)  {    this.corner = paramBoolean;  }  public int getStyle()  {    return this.border;  }  public void setBorder(int paramInt)  {    this.border = paramInt;  }  private static String border2Style(int paramInt)  {    switch (paramInt)    {    case 1:    case 2:    case 5:      return "solid";    case 6:      return "doble";    case 7:    case 9:    case 11:      return "dotted";    case 3:    case 4:    case 8:    case 10:    }    return "dashed";  }  public void createJSONConfig(JSONObject paramJSONObject)    throws JSONException  {    if (this.border != 0)    {      JSONObject localJSONObject = new JSONObject();      localJSONObject.put("width", dashujuUtils.getBorderWidth(this.border)).put("type", border2Style(this.border)).put("color", StableUtils.javaColorToCSSColor(this.color)).put("corner", this.corner);      paramJSONObject.put("border", localJSONObject);    }  }  public boolean equals(Object paramObject)  {    if (!(paramObject instanceof LayoutBorderStyle))      return false;    LayoutBorderStyle localLayoutBorderStyle = (LayoutBorderStyle)paramObject;    return (getStyle() == localLayoutBorderStyle.getStyle()) && (ComparatorUtils.equals(getColor(), localLayoutBorderStyle.getColor())) && (getCorner() == localLayoutBorderStyle.getCorner());  }  public Object clone()    throws CloneNotSupportedException  {    return super.clone();  }  public void readXML(XMLableReader paramXMLableReader)  {    if (paramXMLableReader.isChildNode())    {      String str = paramXMLableReader.getTagName();      if (str.equals("Border"))        setStyle(paramXMLableReader.getAttrAsInt("style", 0), paramXMLableReader.getAttrAsColor("color", Color.black), paramXMLableReader.getAttrAsBoolean("corner", false));    }  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    paramXMLPrintWriter.startTAG("Border").attr("style", this.border);    if (this.color != Color.black)      paramXMLPrintWriter.attr("color", this.color.getRGB());    if (this.corner)      paramXMLPrintWriter.attr("corner", this.corner);    paramXMLPrintWriter.end();  }  public void paint(Graphics paramGraphics, Rectangle2D.Double paramDouble)  {    if (getStyle() != 0)    {      paramGraphics.setColor(this.color);      int i = GraphHelper.getLineStyleSize(this.border);      GraphHelper.draw(paramGraphics, new RoundRectangle2D.Double(paramDouble.getX() + (i == 1 ? 1 : 2) - i - 1.0D, paramDouble.getY() + (i == 1 ? 1 : 2) - i - 1.0D, paramDouble.getWidth() + i, paramDouble.getHeight() + i, this.corner ? 15.0D : 0.0D, this.corner ? 15.0D : 0.0D), this.border);    }  }  public Shape getFilledShape(Insets paramInsets, Dimension paramDimension)  {    return new RoundRectangle2D.Double(paramInsets.left, paramInsets.top, paramDimension.width - paramInsets.left - paramInsets.right, paramDimension.height - paramInsets.top - paramInsets.bottom, this.corner ? 15.0D : 0.0D, this.corner ? 15.0D : 0.0D);  }}