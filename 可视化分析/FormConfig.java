package com.fr.form.formData;import com.fr.dashuju.FRContext;import com.fr.general.ComparatorUtils;import com.fr.general.FRLogger;import com.fr.json.JSONException;import com.fr.json.JSONObject;import com.fr.stable.StringUtils;import java.io.Serializable;public class DataBinding  implements Serializable{  private String dataSourceName;  private String dataBindingKey;  public static String NAME = "Name";  public static String KEY = "Key";  public static DataBinding empty = new DataBinding();  private DataBinding()  {  }  public DataBinding(String[][] paramArrayOfString)  {    this(paramArrayOfString[0][0], paramArrayOfString[0][1]);  }  public DataBinding(String paramString1, String paramString2)  {    this.dataBindingKey = paramString2;    this.dataSourceName = paramString1;  }  public static DataBinding String2DataBinding(String paramString)  {    if (StringUtils.isBlank(paramString))      return new DataBinding();    DataBinding localDataBinding = new DataBinding();    try    {      JSONObject localJSONObject = new JSONObject(paramString);      if (localJSONObject.has(NAME))        localDataBinding.setDataSourceName(localJSONObject.getString(NAME));      if (localJSONObject.has(KEY))        localDataBinding.setDataBindingKey(localJSONObject.getString(KEY));    }    catch (JSONException localJSONException)    {      String[] arrayOfString = paramString.split("\\.");      if (arrayOfString.length > 1)      {        localDataBinding.setDataSourceName(arrayOfString[0]);        localDataBinding.setDataBindingKey(paramString);      }      else      {        FRContext.getLogger().error(localJSONException.getMessage(), localJSONException);      }    }    if (validDataBinding(localDataBinding))      localDataBinding.dataBindingKey = localDataBinding.dataBindingKey.substring(localDataBinding.dataSourceName.length() + 1, localDataBinding.dataBindingKey.length());    return localDataBinding.validate() ? localDataBinding : new DataBinding();  }  protected void _renameTableData(final String paramString1, final String paramString2)  {    traversalWidget(this.container, new WidgetGather()    {      private final String val$oldName;      private final String val$newName;      public void dealWith(Widget paramAnonymousWidget)      {        DataControl localDataControl = (DataControl)paramAnonymousWidget;        if (localDataControl.getWidgetValue() != null)          localDataControl.getWidgetValue().renameTableData(paramString1, paramString2);      }      public boolean dealWithAllCards()      {        return true;      }    }    , DataControl.class);import com.fr.script.Calculator;import com.fr.script.CalculatorMap;import com.fr.stable.StringUtils;import com.fr.stable.core.UUID;import com.fr.stable.script.AbstractNameSpace;import com.fr.stable.script.CalculatorProvider;import com.fr.stable.script.ColumnRowRange;import java.util.ArrayList;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Set;public class FormConfig{  private static FormConfig formConfig = new FormConfig();  private static Object DeathLoopGetWidgetValue = new Object();  public static FormConfig getInstance()  {    return formConfig;  }  public JSONObject dealWithWidgetData(Form paramForm, JSONArray paramJSONArray, Calculator paramCalculator)    throws JSONException  {    CalculatorMap localCalculatorMap = CalculatorMap.createEmptyMap();    ArrayList localArrayList1 = new ArrayList();    ArrayList localArrayList2 = new ArrayList();    for (int i = 0; i < paramJSONArray.length(); i++)    {      String str = (String)paramJSONArray.get(i);      Widget localWidget = paramForm.getWidgetByName(str);      if (localWidget != null)        traversalFormWidget(localWidget, localCalculatorMap, localArrayList1, localArrayList2);    }    return dealWithWidgetData(localCalculatorMap, localArrayList1, localArrayList2, paramCalculator);  }  public JSONObject dealWithWidgetData(Widget paramWidget, Calculator paramCalculator)    throws JSONException  {    CalculatorMap localCalculatorMap = CalculatorMap.createEmptyMap();    ArrayList localArrayList1 = new ArrayList();    ArrayList localArrayList2 = new ArrayList();    traversalFormWidget(paramWidget, localCalculatorMap, localArrayList1, localArrayList2);    return dealWithWidgetData(localCalculatorMap, localArrayList1, localArrayList2, paramCalculator);  }  private void traversalFormWidget(Widget paramWidget, final Map paramMap, final List paramList1, final List paramList2)  {    Form.traversalFormWidget(paramWidget, new Form.WidgetGather()    {      private final Map val$dataControlMap;      private final List val$chartList;      private final List val$frameList;      public void dealWith(Widget paramAnonymousWidget)      {        if ((paramAnonymousWidget instanceof DataControl))        {          if (StringUtils.isEmpty(paramAnonymousWidget.getWidgetName()))            paramAnonymousWidget.setWidgetName(UUID.randomUUID().toString().substring(0, 8));          paramMap.put(paramAnonymousWidget.getWidgetName(), paramAnonymousWidget);        }        else if ((paramAnonymousWidget instanceof ChartEditor))        {          paramList1.add(paramAnonymousWidget);        }        else if ((paramAnonymousWidget instanceof IframeEditor))        {          paramList2.add(paramAnonymousWidget);        }      }      public boolean dealWithAllCards()      {        return false;      }    });  }  private JSONObject dealWithWidgetData(Map paramMap, List paramList1, List paramList2, Calculator paramCalculator)    throws JSONException  {    JSONObject localJSONObject1 = new JSONObject();    JSONObject localJSONObject2 = new JSONObject();    WidgetValueNameSpace localWidgetValueNameSpace = new WidgetValueNameSpace(localJSONObject2);    paramCalculator.pushNameSpace(localWidgetValueNameSpace);    paramCalculator.setAttribute(DeathLoopGetWidgetValue, new LinkedList());    Iterator localIterator = paramMap.entrySet().iterator();    while (localIterator.hasNext())    {      Map.Entry localEntry = (Map.Entry)localIterator.next();      setWidgetValue((Widget)localEntry.getValue(), paramMap, paramCalculator, localJSONObject1, localJSONObject2);    }    for (int i = 0; i < paramList1.size(); i++)      ((ChartEditor)paramList1.get(i)).createAttrResult(paramCalculator, localJSONObject2, localJSONObject1);    for (i = 0; i < paramList2.size(); i++)      ((IframeEditor)paramList2.get(i)).createSourceResult(paramCalculator, localJSONObject2);    paramCalculator.removeNameSpace(localWidgetValueNameSpace);    return localJSONObject2;  }  private void setWidgetValue(Widget paramWidget, Map paramMap, Calculator paramCalculator, JSONObject paramJSONObject1, JSONObject paramJSONObject2)    throws JSONException  {    if (paramJSONObject2.has(paramWidget.getWidgetName().toUpperCase()))      return;    List localList = (List)paramCalculator.getAttribute(DeathLoopGetWidgetValue);    if (localList.contains(paramWidget))    {      localObject1 = new StringBuffer();      i = localList.size();      for (int j = 0; j < i; j++)      {        ((StringBuffer)localObject1).append(((Widget)localList.get(j)).getWidgetName());        ((StringBuffer)localObject1).append('â†’');      }      ((StringBuffer)localObject1).append(paramWidget.getWidgetName());      FRContext.getLogger().error("Death cycle exists at calculating widgets:" + localObject1, new DeathCycleException(paramWidget.getWidgetName()));      return;    }    localList.add(paramWidget);    Object localObject1 = WidgetValue.getWidgetDependence((DataControl)paramWidget, paramCalculator);    for (int i = 0; i < localObject1.length; i++)      if (localObject1[i].length() > 1)      {        Object localObject2 = localObject1[i].charAt(0) == '$' ? localObject1[i].substring(1, localObject1[i].length()) : localObject1[i];        Widget localWidget = (Widget)paramMap.get(localObject2);        if (localWidget != null)          setWidgetValue(localWidget, paramMap, paramCalculator, paramJSONObject1, paramJSONObject2);      }    ((DataControl)paramWidget).createValueResult((DataControl)paramWidget, paramCalculator, paramJSONObject2, paramJSONObject1);    localList.remove(paramWidget);  }   public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    this.widgetList.clear();    super.writeXML(paramXMLPrintWriter);    if (this.north != null)    {      paramXMLPrintWriter.startTAG("NorthAttr");      if (this.northSize != 60)        paramXMLPrintWriter.attr("size", this.northSize);      if (StringUtils.isNotEmpty(this.northTitle))        paramXMLPrintWriter.attr("title", this.northTitle);      paramXMLPrintWriter.end();      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, this.north, "North");    }    if (this.south != null)    {      paramXMLPrintWriter.startTAG("SouthAttr");      if (this.southSize != 60)        paramXMLPrintWriter.attr("size", this.southSize);      if (StringUtils.isNotEmpty(this.southTitle))        paramXMLPrintWriter.attr("title", this.southTitle);      paramXMLPrintWriter.end();      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, this.south, "South");    }    if (this.west != null)    {      paramXMLPrintWriter.startTAG("WestAttr");      if (this.westSize != 60)        paramXMLPrintWriter.attr("size", this.westSize);      if (StringUtils.isNotEmpty(this.westTitle))        paramXMLPrintWriter.attr("title", this.westTitle);      paramXMLPrintWriter.end();      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, this.west, "West");    }    if (this.east != null)    {      paramXMLPrintWriter.startTAG("EastAttr");      if (this.eastSize != 60)        paramXMLPrintWriter.attr("size", this.eastSize);      if (StringUtils.isNotEmpty(this.eastTitle))        paramXMLPrintWriter.attr("title", this.eastTitle);      paramXMLPrintWriter.end();      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, this.east, "East");    }    if (this.center != null)    {      if (StringUtils.isNotEmpty(this.centerTitle))        paramXMLPrintWriter.startTAG("CenterAttr").attr("title", this.centerTitle).end();      GeneralXMLTools.writeXMLable(paramXMLPrintWriter, this.center, "Center");  public Object clone()    throws CloneNotSupportedException  {    WBorderLayout localWBorderLayout = (WBorderLayout)super.clone();    if (this.north != null)      localWBorderLayout.north = ((Widget)this.north.clone());    if (this.south != null)      localWBorderLayout.south = ((Widget)this.south.clone());    if (this.west != null)      localWBorderLayout.west = ((Widget)this.west.clone());    if (this.east != null)      localWBorderLayout.east = ((Widget)this.east.clone());    if (this.center != null)      localWBorderLayout.center = ((Widget)this.center.clone());    return localWBorderLayout;  }}