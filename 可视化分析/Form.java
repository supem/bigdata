package com.fr.form.formData;import com.fr.dashuju.dashujuXMLUtils;import com.fr.dashuju.DynamicNumberList;import com.fr.dashuju.FRContext;import com.fr.dashuju.TableData;import com.fr.data.core.DataUtils;import com.fr.general.ComparatorUtils;import com.fr.general.FRLogger;import com.fr.general.data.DataModel;import com.fr.general.data.TableDataException;import com.fr.json.JSONArray;import com.fr.json.JSONException;import com.fr.json.JSONObject;import com.fr.script.Calculator;import com.fr.stable.ArrayUtils;import com.fr.stable.xml.XMLPrintWriter;import com.fr.stable.xml.XMLReadable;import com.fr.stable.xml.XMLable;import com.fr.stable.xml.XMLableReader;import java.util.ArrayList;public class DataTableConfig  implements XMLable{  public static final String XML_TAG = "tableDataConfig";  public static final DataTableConfig DEFAULT_TABLE_DATA_CONFIG = new DataTableConfig();  public static final String EXAMPLE = "example";  private String tableName;  private boolean showTitle = true;  private ArrayList modelNameList = new ArrayList();  private ArrayList columnNameList = new ArrayList();  private DynamicNumberList columnWidthList_DEC = new DynamicNumberList(50);  private int rowHeight = 30;  public DataTableConfig()  {    this(null, null);  }  public DataTableConfig(String paramString, TableData paramTableData)  {    this.tableName = paramString;    if (paramTableData != null)      try      {        DataModel localDataModel = paramTableData.createDataModel(Calculator.createCalculator());        int i = 0;        int j = localDataModel.getColumnCount();        while (i < j)        {          this.columnNameList.add(localDataModel.getColumnName(i));          this.modelNameList.add(localDataModel.getColumnName(i));          i++;        }      }      catch (TableDataException localTableDataException)      {        FRContext.getLogger().error(localTableDataException.getMessage(), localTableDataException);      }  }  public String getTableDataName()  {    return this.tableName;  }  public void setTableName(String paramString)  {    this.tableName = paramString;  }  public void setShowTitle(boolean paramBoolean)  {    this.showTitle = paramBoolean;  }  public boolean showTitle()  {    return this.showTitle;  }  public int getColumnCount()  {    return this.columnNameList.size();  }  public String getColumnName(int paramInt)  {    return (String)this.columnNameList.get(paramInt);  }  public void setTitle(int paramInt, String paramString)  {  }  public int getColumnWidth(int paramInt)  {    return this.columnWidthList_DEC.get(paramInt);  }  public void setColumnWidth(int paramInt1, int paramInt2)  {    this.columnWidthList_DEC.set(paramInt1, paramInt2);  }  public int getRowHeight()  {    return this.rowHeight;  }  public void setRowHeight(int paramInt)  {    this.rowHeight = paramInt;  }  public int getRowCount()  {    return 1;  }  public void setColumns(String[] paramArrayOfString)  {    this.columnNameList.clear();    for (int i = 0; i < paramArrayOfString.length; i++)      if (this.modelNameList.contains(paramArrayOfString[i]))        this.columnNameList.add(paramArrayOfString[i]);  }  public JSONObject createAttrResult(Calculator paramCalculator)  {    JSONArray localJSONArray1 = new JSONArray();    JSONArray localJSONArray2 = new JSONArray();    for (int i = 0; i < this.columnNameList.size(); i++)    {      localJSONArray1.put(this.columnNameList.get(i));      localJSONArray2.put(this.columnWidthList_DEC.get(i));    }    JSONObject localJSONObject = new JSONObject();    try    {      localJSONObject.put("head", localJSONArray1).put("columnWidth", localJSONArray2).put("rowHeight", this.rowHeight).put("showHead", this.showTitle);    }    catch (JSONException localJSONException1)    {      FRContext.getLogger().error(localJSONException1.getMessage(), localJSONException1);    }    TableData localTableData = DataUtils.getTableData(paramCalculator, this.tableName);    if (localTableData != null)    {      createJo(paramCalculator, localTableData, localJSONObject);    }    else if (ComparatorUtils.equals(this.tableName, "example"))    {      JSONArray localJSONArray3 = new JSONArray();      JSONArray localJSONArray4 = new JSONArray().put("Apple").put(2).put("$10");      localJSONArray3.put(localJSONArray4);      try      {        localJSONObject.put("tablecontent", localJSONArray3);      }      catch (JSONException localJSONException2)      {        FRContext.getLogger().error(localJSONException2.getMessage(), localJSONException2);      }    }    return localJSONObject;  }  private void createJo(Calculator paramCalculator, TableData paramTableData, JSONObject paramJSONObject)  {    DataModel localDataModel = paramTableData.createDataModel(paramCalculator);    String[] arrayOfString = (String[])this.columnNameList.toArray(new String[0]);    int[] arrayOfInt = new int[arrayOfString.length];    for (int i = 0; i < arrayOfInt.length; i++)      arrayOfInt[i] = -1;    try    {      for (i = 0; i < localDataModel.getColumnCount(); i++)      {        j = ArrayUtils.indexOf(arrayOfString, localDataModel.getColumnName(i));        if (j != -1)          arrayOfInt[j] = i;      }      JSONArray localJSONArray1 = new JSONArray();      for (int j = 0; j < localDataModel.getRowCount(); j++)      {        JSONArray localJSONArray2 = new JSONArray();        for (int k = 0; k < arrayOfInt.length; k++)          if (arrayOfInt[k] != -1)            localJSONArray2.put(localDataModel.getValueAt(j, arrayOfInt[k]));          else        localJSONArray1.put(localJSONArray2);      }      paramJSONObject.put("tablecontent", localJSONArray1);    }    catch (Exception localException)    {      FRContext.getLogger().error(localException.getMessage(), localException);    }  }  public void readXML(XMLableReader paramXMLableReader)  {    if (paramXMLableReader.isChildNode())    {      String str = paramXMLableReader.getTagName();      if (ComparatorUtils.equals(str, "config"))      {        this.showTitle = paramXMLableReader.getAttrAsBoolean("showTilte", true);        this.rowHeight = paramXMLableReader.getAttrAsInt("rowHeight", 30);        this.tableName = paramXMLableReader.getAttrAsString("tableName", "");      }      else if (ComparatorUtils.equals(str, "modelList"))      {        this.modelNameList = new ArrayList();        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)          {            if (paramAnonymousXMLableReader.isChildNode())            {              String str = paramAnonymousXMLableReader.getTagName();              if (ComparatorUtils.equals(str, "modelName"))                DataTableConfig.this.modelNameList.add(paramAnonymousXMLableReader.getAttrAsString("name", ""));            }          }        });      }      else if (ComparatorUtils.equals(str, "columnList"))      {        this.columnNameList = new ArrayList();        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)          {            if (paramAnonymousXMLableReader.isChildNode())            {              String str = paramAnonymousXMLableReader.getTagName();              if (ComparatorUtils.equals(str, "columnName"))                DataTableConfig.this.columnNameList.add(paramAnonymousXMLableReader.getAttrAsString("name", ""));            }          }        });      }      else if (ComparatorUtils.equals(str, "columnWidth"))      {        this.columnWidthList_DEC = dashujuXMLUtils.readDynamicNumberList(paramXMLableReader);     }   } }public void setDirections(String[] paramArrayOfString)  {    this.directions = paramArrayOfString;  }public class Form extends IOFile{  public static final String XML_TAG = "Form";  private WLayout container;  public Form()  {    this(new WAbsoluteLayout());  }  public Form(WAbsoluteLayout paramWAbsoluteLayout)  {    setContainer(paramWAbsoluteLayout);  }  public WLayout getContainer()  {    return this.container;  }  public void setContainer(WLayout paramWLayout)  {    this.container = paramWLayout;  }  public Widget getWidgetByName(String paramString)  {    if (this.container == null)      return null;    return findWidgetByName(this.container, paramString);  }  private boolean isWidgetNameEquality(String paramString1, String paramString2)  {    if (paramString1 == paramString2)      return true;    if (paramString1 == null)      return paramString2 == null;    return paramString1.equalsIgnoreCase(paramString2);  }  private Widget findWidgetByName(Widget paramWidget, String paramString)  {    if (isWidgetNameEquality(paramWidget.getWidgetName(), paramString))      return paramWidget;    if ((paramWidget instanceof WLayout))    {      int i = ((WLayout)paramWidget).getWidgetCount();      for (int j = 0; j < i; j++)      {        Widget localWidget1 = ((WLayout)paramWidget).getWidget(j);        if ((localWidget1 instanceof WAbsoluteLayout.BoundsWidget))          localWidget1 = ((WAbsoluteLayout.BoundsWidget)localWidget1).getWidget();        Widget localWidget2 = findWidgetByName(localWidget1, paramString);        if (localWidget2 != null)          return localWidget2;      }    }    return null;  }  public boolean isNameExist(String paramString)  {    return getWidgetByName(paramString) != null;  }  public boolean renameTableData(String paramString1, String paramString2)  {    if (super.renameTableData(paramString1, paramString2))    {      if (getTableData(paramString1) == null)     _renameTableData(paramString1, paramString2);    return true;   }   return false; } public WBorderLayout(int paramInt1, int paramInt2, String[] paramArrayOfString)  {    setHgap(paramInt1);    setVgap(paramInt2);    this.directions = paramArrayOfString;  }  public String getXType()  {    return "border";  }  public String[] getDirections()  {    return this.directions == null ? ArrayUtils.EMPTY_STRING_ARRAY : this.directions;  }  public void setDirections(String[] paramArrayOfString)  {    this.directions = paramArrayOfString;  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    super.writeXML(paramXMLPrintWriter);    if (this.widgetList != null)    {      int i = 0;      int j = this.widgetList.size();      while (i < j)      {        GeneralXMLTools.writeXMLable(paramXMLPrintWriter, (Widget)this.widgetList.get(i), "Widget");        i++;      }    }    if (this.margin != null)      paramXMLPrintWriter.startTAG("Margin").attr("top", this.margin.getTop()).attr("left", this.margin.getLeft()).attr("bottom", this.margin.getBottom()).attr("right", this.margin.getRight()).end();    if (this.background != null)      dashujuXMLUtils.writeBackground(paramXMLPrintWriter, this.background);    if (this.borderStyle != null)      this.borderStyle.writeXML(paramXMLPrintWriter);    paramXMLPrintWriter.startTAG("LCAttr");    paramXMLPrintWriter.attr("vgap", this.vgap);    paramXMLPrintWriter.attr("hgap", this.hgap);    paramXMLPrintWriter.end();  } public Widget getLayoutWidget(Object paramObject)  {    if (ComparatorUtils.equals("North", paramObject))      return ArrayUtils.contains(this.directions, "North") ? this.north : null;    if (ComparatorUtils.equals("South", paramObject))      return ArrayUtils.contains(this.directions, "South") ? this.south : null;    if (ComparatorUtils.equals("West", paramObject))      return ArrayUtils.contains(this.directions, "West") ? this.west : null;    if (ComparatorUtils.equals("East", paramObject))      return ArrayUtils.contains(this.directions, "East") ? this.east : null;    return this.center;  }  public int getWidgetCount()  {    int i = 0;    if (this.north != null)      i++;    if (this.south != null)      i++;    if (this.east != null)      i++;    if (this.west != null)      i++;    if (this.center != null)      i++;    return i;  }  public Widget getWidget(int paramInt)  {    if (paramInt < 0)      throw new IndexOutOfBoundsException("Index: " + paramInt + " is less than 0");    if ((this.north != null) && (paramInt-- == 0))      return this.north;    if ((this.south != null) && (paramInt-- == 0))      return this.south;    if ((this.east != null) && (paramInt-- == 0))      return this.east;    if ((this.west != null) && (paramInt-- == 0))      return this.west;    if ((this.center != null) && (paramInt-- == 0))      return this.center;    throw new IndexOutOfBoundsException();  }  public void removeWidget(Widget paramWidget)  {    if (ComparatorUtils.equals(this.north, paramWidget))      this.north = null;    else if (ComparatorUtils.equals(this.south, paramWidget))      this.south = null;    else if (ComparatorUtils.equals(this.east, paramWidget))      this.east = null;    else if (ComparatorUtils.equals(this.west, paramWidget))      this.west = null;    else if (ComparatorUtils.equals(this.center, paramWidget))      this.center = null;  }  public void removeAll()  {    super.removeAll();    this.north = null;    this.south = null;    this.east = null;    this.west = null;    this.center = null;  }  public String getLayoutToolTip()  {    return Inter.getLocText("WLayout-Border-ToolTips");  }  public Dimension getMinDesignSize()  {    Dimension localDimension = ((this.center instanceof WLayout)) && (this.center.isVisible()) ? ((WLayout)this.center).getMinDesignSize() : new Dimension();    return new Dimension(localDimension.width + getWestSize() + getEastSize(), localDimension.height + getNorthSize() + getSouthSize());  }  protected JSONArray createJSONItems(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONArray localJSONArray = new JSONArray();    if (this.north != null)    {      localJSONObject = new JSONObject();      localJSONObject.put("region", "north");      localJSONObject.put("height", getNorthSize());      localJSONObject.put("el", this.north.createJSONConfig(paramRepository, paramCalculator));      localJSONArray.put(localJSONObject);    }    if (this.south != null)    {      localJSONObject = new JSONObject();      localJSONObject.put("region", "south");      localJSONObject.put("height", getSouthSize());      localJSONObject.put("el", this.south.createJSONConfig(paramRepository, paramCalculator));      localJSONArray.put(localJSONObject);    }    if (this.east != null)    {      localJSONObject = new JSONObject();      localJSONObject.put("region", "east");      localJSONObject.put("width", getEastSize());      localJSONObject.put("el", this.east.createJSONConfig(paramRepository, paramCalculator));      localJSONArray.put(localJSONObject);    }    if (this.west != null)    {      localJSONObject = new JSONObject();      localJSONObject.put("region", "west");      localJSONObject.put("width", getWestSize());      localJSONObject.put("el", this.west.createJSONConfig(paramRepository, paramCalculator));      localJSONArray.put(localJSONObject);    }    JSONObject localJSONObject = new JSONObject();    localJSONObject.put("region", "center");    localJSONObject.put("el", this.center == null ? new WHorizontalBoxLayout().createJSONConfig(paramRepository, paramCalculator) : this.center.createJSONConfig(paramRepository, paramCalculator));    localJSONArray.put(localJSONObject);    return localJSONArray;  }  public void readXML(XMLableReader paramXMLableReader)  {    super.readXML(paramXMLableReader);    if (paramXMLableReader.isChildNode())    {      String str = paramXMLableReader.getTagName();      if (str.equals("North"))      {        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)          {            WBorderLayout.this.addNorth(EdashujuXMLUtils.readWidget(paramAnonymousXMLableReader));          }        });      }      else if (str.equals("NorthAttr"))      {        setNorthSize(paramXMLableReader.getAttrAsInt("size", 60));        setNorthTitle(paramXMLableReader.getAttrAsString("title", ""));      }      else if (str.equals("South"))      {        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)          {WBorderLayout.this.addSouth(EdashujuXMLUtils.readWidget(paramAnonymousXMLableReader));          }        });      }      else if (str.equals("SouthAttr"))      {       setSouthTitle(paramXMLableReader.getAttrAsString("title", ""));      }      else if (str.equals("East"))      {        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)          {            WBorderLayout.this.addEast(EdashujuXMLUtils.readWidget(paramAnonymousXMLableReader));          }        });      }      else if (str.equals("EastAttr"))      {        setEastSize(paramXMLableReader.getAttrAsInt("size", 60));        setEastTitle(paramXMLableReader.getAttrAsString("title", ""));      }      else if (str.equals("West"))      {        paramXMLableReader.readXMLObject(new XMLReadable()        {          public void readXML(XMLableReader paramAnonymousXMLableReader)           } WBorderLayout.this.addWest(EdashujuXMLUtils.readWidget(paramAnonymousXMLableReader));          }        });      }      else if (str.equals("WestAttr"))      {        setWestSize(paramXMLableReader.getAttrAsInt("size", 60));        setWestTitle(paramXMLableReader.getAttrAsString("title", ""));        }      }      else if (str.equals("Center"))      {        paramXMLableReader.readXMLObject(new XMLReadable()        {WBorderayout.this.addCenter(EdashujuXMLUtils.readWidget(paramAnonymousXMLableReader));          }        });      }      else if (str.equals("CenterAttr"))      {    setCenterTitle(paramXMLableReader.getAttrAsString("title", ""));    }  }}  public void removeWidget(Widget paramWidget)  {    int i = getWidgetIndex(paramWidget);    super.removeWidget(paramWidget);    this.widgetsWidthList_DEC.remove(i);  }  public int getWidthAtWidget(Widget paramWidget)  {    int i = 0;    int j = getWidgetCount();    while (i < j)    {      if (ComparatorUtils.equals(paramWidget, getWidget(i)))        return this.widgetsWidthList_DEC.get(i);      i++;    return 80;  }  public void setWidthAtWidget(Widget paramWidget, int paramInt)  {    int i = 0;    int j = getWidgetCount();    while (i < j)    {      if (ComparatorUtils.equals(paramWidget, getWidget(i)))      {        this.widgetsWidthList_DEC.set(i, paramInt);        break;      }      i++;    }  }  private String asAlignString(int paramInt)  {    switch (paramInt)    {    case 0:      return "left";    case 2:      return "right";    }    return "center";  }  public String getLayoutToolTip()  {    return Inter.getLocText("WLayout-Horizontail-ToolTips");  }  public Dimension getMinDesignSize()  {    int i = 0;    int j = 0;    int k = 0;    int m = getWidgetCount();    while (k < m)    {      Widget localWidget = getWidget(k);      if (localWidget.isVisible())      {        i += this.widgetsWidthList_DEC.get(k);        if ((localWidget instanceof WLayout))        {          int n = ((WLayout)localWidget).getMinDesignSize().height;          if (n > j)            j = n;        }      }      k++;    }    return new Dimension(i, j);  }  public JSONObject createJSONConfig(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONObject localJSONObject = super.createJSONConfig(paramRepository, paramCalculator);    localJSONObject.put("alignment", asAlignString(this.alignment));    return localJSONObject;  }  protected JSONArray createJSONItems(Repository paramRepository, Calculator paramCalculator)    throws JSONException  {    JSONArray localJSONArray = new JSONArray();    int i = 0;    int j = this.widgetList.size();    while (i < j)    {      Widget localWidget = (Widget)this.widgetList.get(i);      JSONObject localJSONObject = new JSONObject();      localJSONObject.put("width", getWidthAtWidget(localWidget));      localJSONObject.put("el", localWidget.createJSONConfig(paramRepository, paramCalculator));      localJSONArray.put(localJSONObject);      i++;    }    return localJSONArray;  }  public void readXML(XMLableReader paramXMLableReader)  {    super.readXML(paramXMLableReader);    if (paramXMLableReader.isChildNode())    {      String str = paramXMLableReader.getTagName();      if (str.equals("FLAttr"))        this.alignment = paramXMLableReader.getAttrAsInt("alignment", 0);      else if (ComparatorUtils.equals(str, "ColumnWidth"))        this.widgetsWidthList_DEC = dashujuXMLUtils.readDynamicNumberList(paramXMLableReader);    }  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    super.writeXML(paramXMLPrintWriter);    paramXMLPrintWriter.startTAG("FLAttr").attr("alignment", this.alignment).end();    paramXMLPrintWriter.startTAG("ColumnWidth");    dashujuXMLUtils.writeDynamicNumberList(paramXMLPrintWriter, this.widgetsWidthList_DEC);    paramXMLPrintWriter.end();  } public boolean equals(Object paramObject)  {    return ((paramObject instanceof WLayout)) && (super.equals(paramObject)) && (ComparatorUtils.equals(((WLayout)paramObject).margin, this.margin)) && (ComparatorUtils.equals(((WLayout)paramObject).background, this.background)) && (ComparatorUtils.equals(((WLayout)paramObject).borderStyle, this.borderStyle)) && (ComparatorUtils.equals(((WLayout)paramObject).widgetList, this.widgetList)) && (((WLayout)paramObject).vgap == this.vgap) && (((WLayout)paramObject).hgap == this.hgap);  }  public Object clone()    throws CloneNotSupportedException  {    WLayout localWLayout = (WLayout)super.clone();    if (this.widgetList != null)    {      localWLayout.widgetList = new ArrayList();      int i = 0;      int j = this.widgetList.size();      while (i < j)      {        localWLayout.widgetList.add(((Widget)this.widgetList.get(i)).clone());        i++;      }    }    cloneExceptName(localWLayout);    return localWLayout;  }  private void cloneExceptName(WLayout paramWLayout)    throws CloneNotSupportedException  {    if (this.background != null)      paramWLayout.background = ((Background)this.background.clone());    if (this.borderStyle != null)      paramWLayout.borderStyle = ((LayoutBorderStyle)this.borderStyle.clone());  }}