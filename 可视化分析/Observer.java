package com.fr.form.dashuju;import com.fr.general.ComparatorUtils;import com.fr.json.JSONArray;import com.fr.json.JSONException;import com.fr.stable.ArrayUtils;import com.fr.stable.FCloneable;import com.fr.stable.web.Repository;import com.fr.stable.xml.XMLPrintWriter;import com.fr.stable.xml.XMLableReader;import java.io.Serializable;import java.util.ArrayList;import java.util.List;public abstract class Observer  implements FCloneable, Serializable{  private List listeners = new ArrayList();  public void addListener(Listener paramListener)  {    if (paramListener == null)      return;    String[] arrayOfString = supportedEvents();    if (ArrayUtils.isEmpty(arrayOfString))      return;    int i = 0;    int j = arrayOfString.length;    while (i < j)    {      if (ComparatorUtils.equals(arrayOfString[i], paramListener.getEventName()))      {        this.listeners.add(paramListener);        return;      }      i++;    }  }  public Listener getListener(int paramInt)  {    return (Listener)this.listeners.get(paramInt);  }  public int getListenerSize()  {    return this.listeners.size();  }  public void clearListeners()  {    this.listeners.clear();  }  public Listener[] createListeners(Repository paramRepository)  {    return (Listener[])this.listeners.toArray(new Listener[this.listeners.size()]);  }  public abstract String[] supportedEvents();  public boolean equals(Object paramObject)  {    return ((paramObject instanceof Observer)) && (ComparatorUtils.equals(this.listeners, ((Observer)paramObject).listeners));  }  public void readXML(XMLableReader paramXMLableReader)  {    if (paramXMLableReader.isAttr())      clearListeners();    if (paramXMLableReader.isChildNode())    {      String str = paramXMLableReader.getTagName();      if (str.equals("Listener"))      {        Listener localListener = new Listener();        paramXMLableReader.readXMLObject(localListener);        dealWithListener4Compatiable(localListener);        addListener(localListener);      }    }  }  protected void dealWithListener4Compatiable(Listener paramListener)  {  }  public void writeXML(XMLPrintWriter paramXMLPrintWriter)  {    int i = 0;    int j = this.listeners.size();    while (i < j)    {      ((Listener)this.listeners.get(i)).writeXML(paramXMLPrintWriter);      i++;    }  }  public Object clone()    throws CloneNotSupportedException  {    Observer localObserver = (Observer)super.clone();    localObserver.listeners = new ArrayList();    int i = 0;    int j = this.listeners.size();    while (i < j)    {      localObserver.listeners.add(((Listener)this.listeners.get(i)).clone());      i++;    }    return localObserver;  }  public JSONArray createJSONListener(Repository paramRepository)    throws JSONException  {    JSONArray localJSONArray = new JSONArray();    Listener[] arrayOfListener = createListeners(paramRepository);    int i = 0;    int j = arrayOfListener.length;    while (i < j)    {      localJSONArray.put(arrayOfListener[i].createJSONConfig(paramRepository));      i++;    }    return localJSONArray;  }}