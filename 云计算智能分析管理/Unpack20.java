package de.innosystec.zhinengguanli.unpack;import de.innosystec.zhinengguanli.exception.RarException;import de.innosystec.zhinengguanli.unpack.decode.AudioVariables;import de.innosystec.zhinengguanli.unpack.decode.BitDecode;import de.innosystec.zhinengguanli.unpack.decode.Decode;import de.innosystec.zhinengguanli.unpack.decode.DistDecode;import de.innosystec.zhinengguanli.unpack.decode.LitDecode;import de.innosystec.zhinengguanli.unpack.decode.LowDistDecode;import de.innosystec.zhinengguanli.unpack.decode.MultDecode;import de.innosystec.zhinengguanli.unpack.decode.RepDecode;import java.io.IOException;import java.util.Arrays;public abstract class Unpack20 extends Unpack15{  protected MultDecode[] MD = new MultDecode[4];  protected byte[] UnpOldTable20 = new byte[1028];  protected int UnpAudioBlock;  protected int UnpChannels;  protected int UnpCurChannel;  protected int UnpChannelDelta;  protected AudioVariables[] AudV = new AudioVariables[4];  protected LitDecode LD = new LitDecode(); public void setDestSize(long destSize)  {    this.destUnpSize = destSize;    this.fileExtracted = false;  }  public void setSuspended(boolean suspended)  {    this.suspended = suspended;  }  public int getChar() throws IOException, RarException  {    if (this.inAddr > 32738) {      unpReadBuf();    }    return this.inBuf[(this.inAddr++)] & 0xFF;  }  public int getPpmEscChar()  {    return this.ppmEscChar;  }  public void setPpmEscChar(int ppmEscChar)  {    this.ppmEscChar = ppmEscChar;  }  public void cleanUp() {    if (this.ppm != null) {      SubAllocator allocator = this.ppm.getSubAlloc();      if (allocator != null)        allocator.stopSubAllocator();    }  }}