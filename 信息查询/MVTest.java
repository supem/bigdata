package de.innosystec.xinxichaxun;import de.innosystec.xinxichaxun.exception.RarException;import de.innosystec.xinxichaxun.rarfile.FileHeader;import de.innosystec.xinxichaxun.rarfile.MainHeader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintStream;public class MVTest{  public static void main(String[] args)  {    String filename = "/home/Avenger/testdata/test2.part01.rar";    File f = new File(filename);    Archive a = null;    try {      a = new Archive(f);    }    catch (RarException e) {      e.printStackTrace();    }    catch (IOException e) {      e.printStackTrace();    }    if (a != null) {      a.getMainHeader().print();      FileHeader fh = a.nextFileHeader();      while (fh != null) {        try {          File out = new File("/home/Avenger/testdata/" + fh.getFileNameString().trim());          System.out.println(out.getAbsolutePath());          FileOutputStream os = new FileOutputStream(out);          a.extractFile(fh, os);          os.close();        }        catch (FileNotFoundException e) {          e.printStackTrace();        }        catch (RarException e) {          e.printStackTrace();        }        catch (IOException e) {        e.printStackTrace();       }      fh = a.nextFileHeader();     }   } }protected void corrHuff(int[] CharSet, int[] NumToPlace)  {    int pos = 0;    for (int I = 7; I >= 0; I--) {      for (int J = 0; J < 32; pos++) {        CharSet[pos] = (CharSet[pos] & 0xFFFFFF00 | I);        J++;    }  }} private void ExecuteCode(VMPreparedProgram Prg)  {    if (Prg.getGlobalData().size() > 0)    {      Prg.getInitR()[6] = ((int)this.writtenFileSize);      this.rarVM.setLowEndianValue(Prg.getGlobalData(), 36,         (int)this.writtenFileSize);      this.rarVM.setLowEndianValue(Prg.getGlobalData(), 40,         (int)(this.writtenFileSize >>> 32));   this.rarVM.execute(Prg);}}  public void setCurUnpWrite(long curUnpWrite)  {    this.curUnpWrite = curUnpWrite;  }  public int getDecryption()  {    return this.decryption;  }  public void setDecryption(int decryption)  {    this.decryption = decryption;  }  public int getEncryption()  {    return this.encryption;  }  public void setEncryption(int encryption)  {    this.encryption = encryption;  }  public boolean isNextVolumeMissing()  {    return this.nextVolumeMissing;  }  public void setNextVolumeMissing(boolean nextVolumeMissing)  {    this.nextVolumeMissing = nextVolumeMissing;  }  public long getPackedCRC() {    return this.packedCRC;  }  public void setPackedCRC(long packedCRC) {    this.packedCRC = packedCRC;  }  public long getPackFileCRC()  {    return this.packFileCRC;  }  public void setPackFileCRC(long packFileCRC)  {    this.packFileCRC = packFileCRC;  }  public boolean isPackVolume()  {    return this.packVolume;  }  public void setPackVolume(boolean packVolume)  {    this.packVolume = packVolume;  }  public long getProcessedArcSize()  {    return this.processedArcSize;  }  public void setProcessedArcSize(long processedArcSize)  {    this.processedArcSize = processedArcSize;  }public void setStats(State state) {    setStats(state.getAddress());  }  public void setStats(int state) {    Raw.writeIntLittleEndian(this.mem, this.pos + 2, state);  }  public String toString() {    StringBuilder buffer = new StringBuilder();    buffer.append("FreqData[");    buffer.append("\n  pos=");    buffer.append(this.pos);    buffer.append("\n  size=");    buffer.append(6);    buffer.append("\n  summFreq=");    buffer.append(getSummFreq());    buffer.append("\n  stats=");    buffer.append(getStats());    buffer.append("\n]");    return buffer.toString();  }}